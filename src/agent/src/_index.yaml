version: "1.0"
namespace: wippy.agent

entries:
  # Dependencies
  - name: __dependency.wippy.test
    kind: "ns.dependency"
    meta:
      description: "Testing component"
    component: "wippy/test"
    version: ">=v0.3.0"

  - name: __dependency.wippy.llm
    kind: "ns.dependency"
    meta:
      description: "LLM component"
    component: "wippy/llm"
    version: ">=v0.3.0"

  # wippy.actor:actor
  - name: actor
    kind: library.lua
    meta:
      comment: Actor pattern library for btea processes
    source: file://actor.lua
    modules:
      - json

  # wippy.agent:agent
  - name: agent
    kind: library.lua
    meta:
      type: library
      comment: Agent runner library for executing LLM agents with conversation and tool support
    source: file://agent.lua
    modules:
      - json
      - contract
      - funcs
    imports:
      prompt: wippy.llm:prompt
      llm: wippy.llm:llm

  # wippy.agent:agent_integration_test
  - name: agent_integration_test
    kind: function.lua
    meta:
      name: Agent Integration Test
      type: test
      comment: Comprehensive integration tests for the full agent system chain - Raw Spec to Compiler to Agent to Tool Caller to Real Tools
      group: Agent Framework
      tags:
        - agents
        - integration
        - compiler
        - tool_caller
        - parallel_execution
        - tool_aliases
        - tests
    source: file://agent_integration_test.lua
    modules:
      - time
      - json
      - env
    imports:
      prompt: wippy.llm:prompt
      agent: wippy.agent:agent
      compiler: wippy.agent.compiler:compiler
      test: wippy.test:test
      tool_caller: wippy.agent.tools:caller
    method: run_tests

  # wippy.agent:agent_memory_test
  - name: agent_memory_test
    kind: function.lua
    meta:
      name: Agent Memory Processing Test
      type: test
      comment: Detailed tests for agent memory contract integration and processing logic
      group: Agent Framework
      tags:
        - agents
        - memory
        - contracts
        - processing
        - tests
    source: file://agent_memory_test.lua
    modules:
      - time
      - json
    imports:
      prompt: wippy.llm:prompt
      agent: wippy.agent:agent
      test: wippy.test:test
    method: run_tests

  # wippy.agent:agent_test
  - name: agent_test
    kind: function.lua
    meta:
      name: Agent Test
      type: test
      comment: Tests the agent runner library functionality for executing LLM agents with conversation and tool support
      group: Agent Framework
      tags:
        - agents
        - llm
        - conversation
        - tools
        - tests
    source: file://agent_test.lua
    modules:
      - time
      - json
      - env
    imports:
      prompt: wippy.llm:prompt
      agent: wippy.agent:agent
      agent_registry: wippy.agent.discovery:registry
      llm: wippy.llm:llm
      test: wippy.test:test
      tool_caller: wippy.agent.tools:caller
    method: run_tests

  # wippy.agent:context
  - name: context
    kind: library.lua
    meta:
      type: library
      comment: Agent context manager for loading, compilation, and runtime agent switching
      tags:
        - agents
        - context
        - runtime
        - switching
        - compilation
      description: "Provides a clean abstraction for managing agent lifecycle including loading agents by ID/name, \ncompilation with traits and tools, runtime agent/model switching, context merging, and caching.\nHandles the complexity of agent registry lookup, compilation, and state management while \nproviding simple methods for agent switching during execution (e.g., from control directives).\n"
    source: file://context.lua
    imports:
      agent: wippy.agent:agent
      agent_registry: wippy.agent.discovery:registry
      compiler: wippy.agent.compiler:compiler

  # wippy.agent:context_test
  - name: context_test
    kind: function.lua
    meta:
      name: Agent Context Test
      type: test
      comment: Tests the agent context manager functionality for loading, compilation, and runtime switching
      group: Agent Framework
      tags:
        - agents
        - context
        - runtime
        - switching
        - tests
    source: file://context_test.lua
    imports:
      context: wippy.agent:context
      test: wippy.test:test
    method: run_tests

  # wippy.agent:memory
  - name: memory
    kind: contract.definition
    meta:
      comment: Memory recall interface for retrieving relevant contextual information
      tags:
        - memory
        - recall
        - retrieval
        - context
      description: Retrieves relevant memories based on current work and recent activity
    methods:
      - name: recall
        description: |
          Retrieve relevant memories based on what's currently being worked on and recent actions.

          The binding context should include relevant identifiers (agent_id, session_id, etc).

          Recent actions should be string summaries describing what happened:
          - "user: How do I optimize my database?"
          - "assistant: Let me analyze your schema [called tools]"
          - "tool: analyze_db_schema(db=prod) -> found 3 missing indexes"
          - "delegated to: agent:specialist for API design"

          Returns memories ordered by relevance without scores.
        input_schemas:
          - definition: |
              {
                "type": "object",
                "properties": {
                  "working_on": {
                    "type": "string",
                    "description": "Brief description of current task or topic if any"
                  },
                  "recent_actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Recent activity as string summaries or copies of messages"
                  },
                  "previous_memories": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Previous memory IDs to avoid duplicates",
                    "default": []
                  },
                  "constraints": {
                    "type": "object",
                    "properties": {
                      "max_items": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 50,
                        "default": 5
                      },
                      "max_length": {
                        "type": "integer",
                        "description": "Maximum total character length of memories",
                        "default": 5000
                      },
                      "memory_types": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Filter by memory types"
                      }
                    },
                    "default": {}
                  }
                },
                "required": ["recent_actions"]
              }
            format: application/schema+json
        output_schemas:
          - definition: |-
              {
                "type": "object",
                "properties": {
                  "memories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Memory identifier"
                        },
                        "content": {
                          "type": "string",
                          "description": "Memory content"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Memory type classification"
                            },
                            "source": {
                              "type": "string",
                              "description": "Origin of this memory"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "required": ["id", "content"]
                    },
                    "description": "Retrieved memories ordered by relevance"
                  }
                },
                "required": ["memories"]
              }
            format: application/schema+json
